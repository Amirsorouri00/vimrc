To build a kernel and device tree for allwinner a64 to setup kmscube with buildroot and enable gpu and hdmi drivers on ubuntu, you will need to follow these steps:

•  Download and extract the source code of buildroot from its official website https://stackoverflow.com/questions/69881974/buildroot-how-to-modify-device-tree-for-custom-board.

•  Download and extract the source code of the Linux kernel from its official website https://docs.armbian.com/User-Guide_Allwinner_overlays/. Alternatively, you can use the kernel provided by buildroot in its package directory.

•  Download and extract the source code of the device tree compiler (dtc) from its official website https://www.kernel.org/doc/html/latest/devicetree/usage-model.html. Alternatively, you can use the dtc provided by buildroot in its package directory.

•  Download and extract the source code of kmscube from its official website https://wiki.ubuntu.com/Kernel/BuildYourOwnKernel. Alternatively, you can use the kmscube provided by buildroot in its package directory.

•  Create a custom configuration for your target device using the buildroot menuconfig tool. You can run this tool by executing the following command in the buildroot directory:

make menuconfig

•  In the menuconfig tool, you will need to set some options, such as:

•  Target options: Select "Aarch64 (Little Endian)" as the target architecture, "cortex-a53" as the target architecture variant, and "vfpv4" as the floating point unit.

•  Toolchain: Select "External toolchain" as the toolchain type, and choose a suitable toolchain for your target device, such as Linaro AArch64 2021.10 or crosstool-NG AArch64 2021.10.

•  Kernel: Enable "Linux kernel" as the kernel type, and select "Custom tarball" as the kernel source. Then, provide the path to your kernel source code or the kernel tarball. You can also enable some kernel features and options that are relevant for your device, such as DRM/KMS support, Allwinner SoC support, Mali GPU support, etc.

•  Device Tree: Enable "Device Tree Source file names" and provide the name of your device tree source file (dts) for your target device. You can find some dts files for allwinner a64 devices in the kernel source code under arch/arm64/boot/dts/allwinner/ directory. You can also modify or create your own dts file according to your device specifications.

•  Filesystem images: Select "ext4 root filesystem" as the root filesystem type, and provide a suitable size for your root filesystem image. You can also enable some filesystem features and options that are relevant for your device, such as UUID support, GPT partition table support, etc.

•  Bootloaders: Enable "U-Boot" as the bootloader type, and select "Custom git repository" as the bootloader source. Then, provide the URL and branch of your U-Boot source code or fork. You can find some U-Boot forks for allwinner a64 devices on GitHub. You can also modify or create your own U-Boot configuration according to your device specifications.

•  Target packages: Enable "kmscube" as one of the target packages to install on your root filesystem image. You can also enable some other packages that are relevant for your device or application, such as Xorg server, Wayland compositor, OpenGL libraries, etc.

•  Save and exit the menuconfig tool. This will generate a .config file in the buildroot directory that contains your custom configuration.

•  Run the following command in the buildroot directory to build your kernel, device tree, bootloader, root filesystem image, and target packages:

make

•  This will take some time depending on your hardware and network speed. Once it is done, you will find your output files in the output/images directory. You will need these files to flash them on your target device:

•  u-boot.bin: The U-Boot binary file that contains the bootloader code.

•  u-boot-sunxi-with-spl.bin: The U-Boot binary file that contains the SPL (Secondary Program Loader) code.

•  sun50i-a64-pine64-plus.dtb: The device tree blob file that contains the hardware description of your target device. The name of this file may vary depending on your dts file name.

•  zImage: The compressed kernel image file that contains the kernel code.

•  rootfs.ext4: The ext4 root filesystem image file that contains the root filesystem and target packages.

•  To flash these files on your target device, you will need a micro SD card or an eMMC module that is compatible with your target device. You will also need a tool to write these files on your SD card or eMMC module, such as dd or Etcher.

•  To write these files on your SD card or eMMC module using dd, you will need to follow these steps:

•  Insert your SD card or eMMC module into your host computer using an adapter if needed.

•  Identify the device name of your SD card or eMMC module using the lsblk or fdisk command. For example, it may be /dev/sdb or /dev/mmcblk0.

•  Unmount any partitions on your SD card or eMMC module using the umount command. For example, if your device name is /dev/sdb, you can run:

sudo umount /dev/sdb*

•  Write the U-Boot binary file with SPL code to the beginning of your SD card or eMMC module using the dd command. For example, if your device name is /dev/sdb and your U-Boot binary file with SPL code is u-boot-sunxi-with-spl.bin, you can run:

sudo dd if=u-boot-sunxi-with-spl.bin of=/dev/sdb bs=8k seek=1

•  Write the U-Boot binary file without SPL code to a specific offset on your SD card or eMMC module using the dd command. For example, if your device name is /dev/sdb and your U-Boot binary file without SPL code is u-boot.bin, you can run:

sudo dd if=u-boot.bin of=/dev/sdb bs=1k seek=40

•  Create a GPT partition table on your SD card or eMMC module using the parted command. For example, if your device name is /dev/sdb, you can run:

sudo parted /dev/sdb mklabel gpt

•  Create a boot partition on your SD card or eMMC module using the parted command. This partition will contain the kernel and device tree files. You can choose any size for this partition, but it should be large enough to fit these files. For example, if your device name is /dev/sdb and you want to create a boot partition of 100 MB, you can run:

sudo parted /dev/sdb mkpart boot fat32 1M 100M

•  Create a root partition on your SD card or eMMC module using the parted command. This partition will contain the root filesystem image file. You can choose any size for this partition, but it should be large enough to fit this file. For example, if your device name is /dev/sdb and you want to create a root partition of 2 GB, you can run:

sudo parted /dev/sdb mkpart root ext4 100M 2G

•  Format the boot partition as FAT32 using the mkfs.vfat command. For example, if your boot partition is /dev/sdb1, you can run:

sudo mkfs.vfat /dev/sdb1

•  Format the root partition as ext4 using the mkfs.ext4 command. For example, if your root partition is /dev/sdb2, you can run:

sudo mkfs.ext4 /dev/sdb2

•  Mount the boot partition on a temporary directory using the mount command. For example, if your boot partition is /dev/sdb1 and you want to mount it on /mnt/boot, you can run:

sudo mount /dev/sdb1 /mnt/boot

•  Mount the root partition on a temporary directory using the mount command. For example, if your root partition is /dev/sdb2 and you want to mount it on /mnt/root, you can run:

sudo mount /dev/sdb2 /mnt/root

•  Copy the kernel image file to the boot partition using the cp command. For example, if your kernel image file is zImage and you have mounted the boot partition on /mnt/boot, you can run:

sudo cp zImage /mnt/boot/

•  Copy the device tree blob file to the boot partition using the cp command. For example, if your device tree blob file is sun50i-a64-pine64-plus.dtb and you have mounted the boot partition on /mnt/boot, you can run:

sudo cp sun50i-a64-pine64-plus.dtb /mnt/boot/

•  Copy the root filesystem image file to the root partition using the dd command. For example, if your root filesystem image file is rootfs.ext4 and you have mounted the root partition on /mnt/root, you can run:

sudo dd if=rootfs.ext4 of=/mnt/root bs=4M conv=fsync status=progress

•  Unmount the boot and root partitions using the umount command. For example, if you have mounted them on /mnt/boot and /mnt/root, you can run:

sudo umount /mnt/boot
sudo umount

